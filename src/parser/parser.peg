JSONPath = Root
  nodes:(AllParentExpression / deep:Descendant step:(Node) { return { ...step, deep } })*
  modifiers:(Modifier+)?
  { return nodes.concat(Array.isArray(modifiers) ? modifiers : modifiers === null ? [] : modifiers) }

Root = "$"

Node =  MemberExpression
        / (Wildcard / "[" Wildcard "]") { return { type: "WildcardExpression" } }
        / "[" expression:(ScriptExpression) "]" { return expression }
        / "[" expression:(ScriptFilterExpression) "]" { return expression }
        / expression:(JsonPathPlusFilterFunction / CustomScriptFilterExpression) { return expression }
        / "[" value:(value:MemberIdentifier ","? { return value })* "]" { return { type: "MultipleMemberExpression", value: [...new Set(value)] } }
        / "[" expression:SliceExpression "]" { return expression }

AllParentExpression = & { return /^\$\.{2}[~^]*$/.test(input) } '..' { return { type: 'AllParentExpression' } }
MemberExpression = value:((value:Identifier) / "[" value:(MemberIdentifier) "]" { return value }) { return { type: "MemberExpression", value } }
ScriptExpression = "(" value:EvalExpression ")" { return value }
ScriptFilterExpression = "?(" value:JSScript ")" { return { type: "ScriptFilterExpression", value } }
SliceExpression = value:$((((Number ":" Number?) / (":" Number?) / Number) (":" Number)?))  { return {
    type: "SliceExpression",
    value: value.split(':').reduce((values, val, i) => {
      if (val !== '') values[i] = Number(val);
      return values;
    }, [0, Infinity, 1])
  }
}

JsonPathPlusFilterFunction = value:$("@" [a-z]+ "()") { return { type: 'ScriptFilterExpression', value } }
CustomScriptFilterExpression = value:$("@" node:JsonPathPlusFilterFunction { return node.value }) { return { type: 'ScriptFilterExpression', value } }

KeyExpression = "~" { return { type: "KeyExpression" } }
ParentExpression = "^" { return { type: "ParentExpression" } }
Modifier = KeyExpression / ParentExpression

Descendant = ".." { return true } /  "."  & "["  { return true } / "." { return false } / & [@[] { return false }

Identifier = $([$_-] / Char / Digit)+
MemberIdentifier = value:Identifier { return value.length > 0 && Number.isSafeInteger(Number(value)) ? Number(value) : value } / (("\"" $([^"]*) "\"") / ("'" $([^']*) "'")) { return text().slice(1, -1) }
Number = "-"? Digit+ { return Number(text()); }

Quote = "'" / "\""
Wildcard = "*"
Char = [A-Za-z]
Digit = [0-9]
Space = [ \t]

JSScript = $(Char / Digit / Space / JSToken / JSString / JSScriptElementAccess / JSFnCall)+
JSScriptElementAccess = ("[" (Digit / Char / JSString / JSFnCall)* "]")
JSString = (["] [^"]* ["]) / (['] [^']* ['])
JSToken = [ $@.,_=<>!|&+~%^*/;\-[\]]
JSFnCall = ("(" (JSString / Char / Digit / JSScriptElementAccess / JSToken / Space / JSFnCall)* ")")

// EvalExpression = "@" value:((LengthEvalExpression) / ("."? value:MemberExpression { return value })) { return value }
EvalExpression = "@" value:(LengthEvalExpression) { return value }
LengthEvalExpression = ".length" Space* "-" Space* value:$(Digit+) { return { type: "SliceExpression", value: [-value, Infinity, 1] } }
